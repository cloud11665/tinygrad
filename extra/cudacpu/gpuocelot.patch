diff --git a/ocelot/CMakeLists.txt b/ocelot/CMakeLists.txt
index fef7ee9b..534a4d7c 100644
--- a/ocelot/CMakeLists.txt
+++ b/ocelot/CMakeLists.txt
@@ -21,6 +21,8 @@ find_package(FLEX 2.5 REQUIRED)
 find_package(BISON 2.5 REQUIRED)
 find_package(GLEW REQUIRED)
 find_package(ZLIB REQUIRED)
+set(TINFO_INCLUDE_DIRS "/usr/include")
+set(TINFO_LIBRARIES "/usr/lib/x86_64-linux-gnu/libtinfo.so")
 
 if ("x${BUILD_LLVM}" STREQUAL "xOFF")
 find_package(LLVM REQUIRED CONFIG)
@@ -570,6 +572,10 @@ ocelot_add_tests(transforms)
 ocelot_add_tests(translator)
 ocelot_add_tests(util)
 
+add_library(cudacpu SHARED cudacpu.cpp)
+target_include_directories(cudacpu PUBLIC ${${PROJECT_NAME}_INCLUDE_DIRS})
+target_link_libraries(cudacpu PUBLIC ${${PROJECT_NAME}_LINK_LIBRARIES} ${ZLIB_LIBRARIES} ${TINFO_LIBRARIES} -Wl,--gc-sections -Wl,--start-group ${LLVM_LIBRARIES} -Wl,--end-group ${ZLIB_LIBRARIES})
+target_link_directories(cudacpu PUBLIC ${${PROJECT_NAME}_LIBRARY_DIRS})
 res_embed(TARGET ${PROJECT_NAME}_executive_TestEmulator NAME "TestEmulator_ptx"
        PATH ${CMAKE_CURRENT_SOURCE_DIR}/src/executive/test/TestEmulator.ptx KEYWORD)

diff --git a/ocelot/src/ir/PTXInstruction.cpp b/ocelot/src/ir/PTXInstruction.cpp
index 6a9d2dc8..5b2979a7 100644
--- a/ocelot/src/ir/PTXInstruction.cpp
+++ b/ocelot/src/ir/PTXInstruction.cpp
@@ -1038,9 +1038,12 @@ std::string ir::PTXInstruction::valid() const {
 				}
 			}
 			if( a.type != b.type ) {
-				return "type of operand A " + PTXOperand::toString( a.type ) 
-					+ " does not equal type of operand B " 
+				return "";
+				/*
+				return "type of operand A " + PTXOperand::toString( a.type )
+					+ " does not equal type of operand B "
 					+ PTXOperand::toString( b.type );
+				*/
 			}
 			if( !( c.bytes() == d.bytes() ) ) {
 				std::stringstream stream;
diff --git a/ocelot/src/parser/PTXParser.cpp b/ocelot/src/parser/PTXParser.cpp
index b392e8c7..23bc5a00 100644
--- a/ocelot/src/parser/PTXParser.cpp
+++ b/ocelot/src/parser/PTXParser.cpp
@@ -1284,6 +1284,7 @@ namespace parser
 	
 		std::string message = statements.back().instruction.valid();
 	
+		/*
 		if( message != "" )
 		{
 			throw_exception( toString( location, *this ) 
@@ -1291,6 +1292,7 @@ namespace parser
 				<< statements.back().instruction.toString() 
 				<< " : " << message, InvalidInstruction );
 		}
+		*/
 	
 		operandVector.clear();
 	}
