diff --git a/ocelot/CMakeLists.txt b/ocelot/CMakeLists.txt
index fef7ee9b..9c33b45e 100644
--- a/ocelot/CMakeLists.txt
+++ b/ocelot/CMakeLists.txt
@@ -8,11 +8,12 @@ if ("x${CMAKE_BUILD_TYPE}" STREQUAL "x")
 set(CMAKE_BUILD_TYPE "Release")
 endif()
 
-list(APPEND CMAKE_CXX_FLAGS -fexceptions)
+list(APPEND CMAKE_CXX_FLAGS -fexceptions -Wno-return-type -Wno-terminate)
 
 # in order to retain the PTX code in the text executables,
 # the target GPU architecture has to be virtual.
 set(CMAKE_CUDA_ARCHITECTURES 35-virtual)
+list(APPEND CUDA_NVCC_FLAGS -Wno-deprecated-gpu-targets -Wno-deprecated-declarations)
 
 set(CMAKE_CUDA_SEPARABLE_COMPILATION ON)
 
@@ -21,6 +22,8 @@ find_package(FLEX 2.5 REQUIRED)
 find_package(BISON 2.5 REQUIRED)
 find_package(GLEW REQUIRED)
 find_package(ZLIB REQUIRED)
+set(TINFO_INCLUDE_DIRS "/usr/include")
+set(TINFO_LIBRARIES "/usr/lib/x86_64-linux-gnu/libtinfo.so")
 
 if ("x${BUILD_LLVM}" STREQUAL "xOFF")
 find_package(LLVM REQUIRED CONFIG)
@@ -518,50 +521,9 @@ target_include_directories(${PROJECT_NAME}_util PRIVATE ${${PROJECT_NAME}_INCLUD
 target_link_libraries(${PROJECT_NAME}_util PUBLIC ${${PROJECT_NAME}_LINK_LIBRARIES})
 target_link_directories(${PROJECT_NAME}_util PUBLIC ${${PROJECT_NAME}_LIBRARY_DIRS})
 
-add_library(${PROJECT_NAME} SHARED src/ocelot.cpp)
-target_include_directories(${PROJECT_NAME} PUBLIC ${${PROJECT_NAME}_INCLUDE_DIRS})
-target_link_libraries(${PROJECT_NAME} PRIVATE
-	"-Wl,--whole-archive"
-	${PROJECT_NAME}_analysis
-	${PROJECT_NAME}_api
-	${PROJECT_NAME}_cal
-	${PROJECT_NAME}_cuda
-	${PROJECT_NAME}_executive
-	${PROJECT_NAME}_ir
-	${PROJECT_NAME}_parser
-	${PROJECT_NAME}_trace
-	${PROJECT_NAME}_transforms
-	${PROJECT_NAME}_translator
-	${PROJECT_NAME}_util
-	"-Wl,--no-whole-archive")
-target_link_libraries(${PROJECT_NAME} PUBLIC ${${PROJECT_NAME}_LINK_LIBRARIES})
-target_link_libraries(${PROJECT_NAME} PRIVATE -Wl,--gc-sections -Wl,--start-group ${LLVM_LIBRARIES} -Wl,--end-group)
-target_link_directories(${PROJECT_NAME} PUBLIC ${${PROJECT_NAME}_LIBRARY_DIRS})
-
-add_executable(LoadPtx src/tools/LoadPtx.cpp)
-set_property(TARGET LoadPtx PROPERTY CXX_STANDARD 14)
-target_link_libraries(LoadPtx ${PROJECT_NAME} hydrazine)
-
-add_executable(OcelotKernelTestHarness src/tools/KernelTestHarness.cpp)
-set_property(TARGET OcelotKernelTestHarness PROPERTY CXX_STANDARD 14)
-target_link_libraries(OcelotKernelTestHarness ${PROJECT_NAME} hydrazine)
-
-add_executable(OcelotLinker src/tools/OcelotLinker.cpp)
-set_property(TARGET OcelotLinker PROPERTY CXX_STANDARD 14)
-target_link_libraries(OcelotLinker ${PROJECT_NAME} hydrazine)
-
-add_executable(OcelotServer src/tools/OcelotServer.cpp)
-set_property(TARGET OcelotServer PROPERTY CXX_STANDARD 14)
-target_link_libraries(OcelotServer ${PROJECT_NAME} hydrazine)
-
-add_executable(PTXOptimizer src/tools/PTXOptimizer.cpp)
-set_property(TARGET PTXOptimizer PROPERTY CXX_STANDARD 14)
-target_link_libraries(PTXOptimizer ${PROJECT_NAME} hydrazine)
-
 ocelot_add_tests(analysis)
 ocelot_add_tests(api)
 ocelot_add_tests(cal)
-ocelot_add_tests(cuda)
 ocelot_add_tests(executive)
 ocelot_add_tests(ir)
 ocelot_add_tests(parser)
@@ -570,6 +532,27 @@ ocelot_add_tests(transforms)
 ocelot_add_tests(translator)
 ocelot_add_tests(util)
 
+add_library(cudacpu SHARED cudacpu.cpp)
+target_include_directories(cudacpu PUBLIC ${${PROJECT_NAME}_INCLUDE_DIRS})
+target_link_libraries(cudacpu PRIVATE
+    "-Wl,--whole-archive"
+    ${PROJECT_NAME}_analysis
+    ${PROJECT_NAME}_api
+    ${PROJECT_NAME}_cal
+    ${PROJECT_NAME}_cuda
+    ${PROJECT_NAME}_executive
+    ${PROJECT_NAME}_ir
+    ${PROJECT_NAME}_parser
+    ${PROJECT_NAME}_trace
+    ${PROJECT_NAME}_transforms
+    ${PROJECT_NAME}_translator
+    ${PROJECT_NAME}_util
+    "-Wl,--no-whole-archive")
+target_link_libraries(cudacpu PUBLIC ${${PROJECT_NAME}_LINK_LIBRARIES} ${ZLIB_LIBRARIES} ${TINFO_LIBRARIES})
+target_link_libraries(cudacpu PRIVATE -Wl,--gc-sections -Wl,--start-group ${LLVM_LIBRARIES} -Wl,--end-group)
+target_link_directories(cudacpu PUBLIC ${${PROJECT_NAME}_LIBRARY_DIRS})
+target_link_libraries(cudacpu PUBLIC ${ZLIB_LIBRARIES})
+
 res_embed(TARGET ${PROJECT_NAME}_executive_TestEmulator NAME "TestEmulator_ptx"
 	PATH ${CMAKE_CURRENT_SOURCE_DIR}/src/executive/test/TestEmulator.ptx KEYWORD)
 
